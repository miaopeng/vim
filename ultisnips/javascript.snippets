###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet	/* "Comments"
/**
 * ${1:Describe what this method does}
 * @param {${2:String|Object|Array|Boolean|Number}} ${3:paramName} ${4:Describe this parameter}
 * @return ${5:Describe what it returns}
 */
endsnippet

snippet get "Get Elements"
getElement${1/(T)|.*/(?1:s)/}By${1:T}${1/(T)|(I)|.*/(?1:agName)(?2:d)/}('$2')
endsnippet

snippet '':f "object method string"
'${1:${2:#thing}:${3:click}}': function(element) {
	$0
}${10:,}
endsnippet

snippet :f "Object Method"
${1:method_name}: function(${3:attribute}) {
	$0
}${10:,}
endsnippet

snippet :, "Object Value JS"
${1:value_name}:${0:value},
endsnippet

snippet : "Object key key: 'value'"
${1:key}: ${2:"${3:value}"}${4:, }
endsnippet

snippet proto "Prototype (proto)"
${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
	${0:// body...}
};

endsnippet

snippet for "for (...) {...} (faster)"
for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2--) {
	${3:$1[$2]}$0
};
endsnippet

snippet for "for (...) {...}"
for (var ${2:i} = 0, l = ${1:Things}.length; $2 < l; $2++) {
	${3:$1[$2]}$0
};
endsnippet

snippet fun "function (fun)"
function ${1:function_name} (${2:argument}) {
	${0:// body...}
}
endsnippet

snippet f "anonymous function"
function(${1:argument}) {
  ${3}
}${2:;}
endsnippet

snippet ff "closure function"
;(function(${2:argument}) {
  ${3}
})($1);
endsnippet

snippet ife "if ___ else"
if (${1:true}) {
  $0
} else {

}
endsnippet

snippet if "if"
if (${1:true}) {
  $0
}
endsnippet

snippet timeout "setTimeout function"
setTimeout(function() {
  $0
}${2:}, ${1:10});
endsnippet

snippet interval "setInterval function"
setInterval(function() {
  $0
}${2:}, ${1:10});
endsnippet

snippet switch "switch"
switch(${1:expression}) {
    case '${3:case}':
        ${4:// code}
        break;
    ${5}
    default:
        ${2:// code}
}
endsnippet

snippet try "try-catch"
try {
    ${1://code}
} catch(ex) {${2}}
endsnippet

snippet c "console"
console.${1:log}('log:', ${2:1}, ${3}) // debug
endsnippet

# snippet def "define"
# define(${1:[
    # ${2}
# ], }function(${3:require, exports, module}) {
    # ${4}
# });
# endsnippet

# snippet req "require"
# require(${1:[
    # ${2}
# ], }function(${3:require, exports, module}) {
    # ${4}
# });
# endsnippet

snippet //= "pipline require"
//= require ${0}
endsnippet

snippet class "class"
function ${1:ClassName}(${2:opt}) {
    ${3}
}

$1.prototype = {

    ${7}

};

function exports(${5:$2}) {
    return exports.$4(${6:$5});
}

exports.${4:$1} = $1;

return exports;
endsnippet

snippet single "Singleton"
/**
 * ${7:Describe what this singleton object does}
 * @param {${8:String|Object|Array|Boolean|Number}} ${9:paramName} 
 * @return
 */
var ${1:Singleton} = (function() {
	${2}
	return {
		${3:publicMethod}: function(${5:opt}) {
			${4://code}
		}${6:,}	
	};
})();
endsnippet

snippet App "Application"
/**
 * ${7:Describe what this application does}
 */
;(function($, exports) {
  'use strict';

  var App = {
    init: function(opt) {
      
    }
  };
  exports.app = App;
})(jQuery, this);
endsnippet

snippet $ "jQuery Selector"
$('${1}')
endsnippet

snippet jpe "jQuery Plugin For inherit"
/* =================================
 * ================================= */

(function($) {
    "use strict";

    // PUBLIC CLASS DEFINITION
    // ===============================

    var ClassName = function(el, options) {
        this.init('pluginName', el, options);
    };

    ClassName.DEFAULTS = $.extend({}, $.fn.Parent.Constructor.DEFAULTS, {});

    ClassName.prototype = $.extend({}, $.fn.Parent.Constructor.prototype);

    ClassName.prototype.constructor = ClassName;

    ClassName.prototype.Function = function() {};

    // PLUGIN DEFINITION
    // =========================

    $.fn.pluginName = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data('namespace.pluginName');
            var options = typeof option === 'object' && option;

            if (!data) {
                $this.data('namespace.pluginName', (data = new ClassName(this, options)));
            }
            if (typeof option === 'string') {
                data[option]();
            }
        });
    };

})(window.jQuery);
endsnippet

snippet jp "jQuery Plugin"
/* =================================
 * ================================= */

(function($) {
    "use strict";

    // PUBLIC CLASS DEFINITION
    // ===============================

    var ClassName = function(el, options) {
        this.type = null;
        this.$el = null;
        this.init('pluginName', el, options);
    };

    ClassName.VERSION = '0.0.1';

    ClassName.DEFAULTS = {};

    ClassName.prototype.init = function(type, el, options) {
        this.type = type;
        this.$el = $(el);
        this.options = this.getOptions(options);
    };

    ClassName.prototype.getDefaults = function() {
        return ClassName.DEFAULTS;
    };

    ClassName.prototype.getOptions = function(options) {
        options = $.extend({}, this.getDefaults(), this.$el.data(), options);
        return options;
    };

    ClassName.prototype.destroy = function() {
        this.hide().$el.off('.' + this.type).removeData('namespace.' + this.type);
    };

    // PLUGIN DEFINITION
    // =========================

    function Plugin(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data('namespace.pluginName');
            var options = typeof option === 'object' && option;

            if (!data && option === 'destroy') {
                return;
            }
            if (!data) {
                $this.data('namespace.pluginName', (data = new ClassName(this, options)));
            }
            if (typeof option === 'string') {
                data[option]();
            }
        });
    }

    $.fn.pluginName = Plugin;
    $.fn.pluginName.Constructor = ClassName;

})(window.jQuery);
endsnippet
